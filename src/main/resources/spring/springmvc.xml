<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:websocket="http://www.springframework.org/schema/websocket"
        xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

    <!-- 扫描controller包 -->
    <context:component-scan base-package="com.hj.controller"></context:component-scan>

    <!-- 开启基于注解的aop功能 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <!--注解映射器 -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>-->
    <!--注解适配器 -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>-->

    <!-- mvc:annotation-driven和注解映射器和注解适配器配置二选一 -->
    <mvc:annotation-driven>
        <!-- 启动JSON格式的配置 -->
        <mvc:message-converters>
            <!-- 这里也可以自己定制class -->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>  <!-- 避免IE出现下载JSON文件的情况 -->
                    </list>
                </property>
            </bean>
        </mvc:message-converters>

    </mvc:annotation-driven>


    <!-- 视图解析器解析 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 配置jsp路径的前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <!-- 配置jsp路径的后缀 -->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 对静态资源文件的访问   缓存一年-->
	<!--<mvc:resources mapping="img/**" location="../../webapp/img/"  cache-period="31536000"/>-->
	<!--<mvc:resources mapping="css/**" location="../../webapp/css/" />-->
	<!--<mvc:resources mapping="js/**" location="../../webapp/js/" />-->

	<!--<mvc:resources mapping="/fonts/**" location="../../webapp/fonts/" />-->
	<!--<mvc:resources mapping="/favicon.ico" location="../..favicon.ico" />-->


    <!--<mvc:resources location="/Images/" mapping="/Images/**"/>-->
    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--
                /**的意思是所有文件夹及里面的子文件夹
                /*是所有文件夹，不含子文件夹
                /是web项目的根目录
                exclude-mapping 不拦截的url
            -->
            <mvc:mapping path="/" />
            <mvc:mapping path="/**" />
            <mvc:exclude-mapping path="/code"/>
            <mvc:exclude-mapping path="/logout"/>
            <mvc:exclude-mapping path="/wechatTest"/>
            <mvc:exclude-mapping path="/Images"/>
            <bean class="com.hj.interceptor.CommonInterceptor"></bean>

        </mvc:interceptor>
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash;-->
                <!--/**的意思是所有文件夹及里面的子文件夹-->
                <!--/*是所有文件夹，不含子文件夹-->
                <!--/是web项目的根目录-->
                <!--exclude-mapping 不拦截的url-->
            <!--&ndash;&gt;-->
            <!--<mvc:mapping path="/" />-->
            <!--<mvc:mapping path="/**" />-->
            <!--<mvc:exclude-mapping path="/code"/>-->
            <!--<mvc:exclude-mapping path="/logout"/>-->


            <!--<bean class="com.hj.interceptor.MyHandShakeInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    </mvc:interceptors>


    <!-- 定义文件解释器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置默认编码 -->
        <property name="defaultEncoding" value="utf-8"></property>
        <!-- 上传图片最大大小20M-->
        <property name="maxUploadSize" value="20969760"></property>
    </bean>

    <!-- ②将切面类注册到IoC中 -->
    <bean id="logAspect" class="com.hj.aspect.LogAspect"></bean>
    <!-- ③配置切面类切入位置和切入点，需要使用AOP名称空间 -->
    <aop:config>
        <!-- 设置一个通用切入点表达式 -->
        <aop:pointcut expression="execution(* com.hj.controller.ArticleController.*(..))" id="mypoint"/>
        <aop:aspect id="lA" ref="logAspect">
            <aop:before method="logStart" pointcut-ref="mypoint"/>
            <aop:after method="logEnd" pointcut-ref="mypoint"/>
            <aop:after-returning method="logReturn" pointcut-ref="mypoint" returning="rt"/>
            <aop:after-throwing method="logException" pointcut-ref="mypoint" throwing="e"/>
        </aop:aspect>
        <!-- 当有多个切面类的时候，就多用几个aop:aspect标签 -->
    </aop:config>



    <!-- 接口跨域配置 -->
    <mvc:cors>
        <mvc:mapping path="/**"
                     allowed-origins="*"
                     allowed-methods="POST, GET, OPTIONS, DELETE, PUT"
                     allowed-headers="Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With"
                     allow-credentials="true" />
    </mvc:cors>

</beans>